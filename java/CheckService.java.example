// "check_service-1.0-SNAPSHOT-jar-with-dependencies.jar"
// Some java source files in the jar file are as follows

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Driver;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

/**
 * @author CDY
 * @deprecated
 *
 * This class will work in Python environment,
 * and its main function is to monitor the server's survival state by sending heartbeat
 * detection every second with file information,
 * so that the client can ensure data synchronization in case of server downtime
 *
 * Methods called by Python environment: _start_()
 *
 */

class CheckService {

    private static final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private static String fp, host, user, pwd, db;
    private static int port;
    private static byte last_sta = 0;

    /**
     * @param file_path Server survival flag file
     * @param _host     Host number of the server
     * @param _port     database used port
     * @param _user     database user
     * @param _pwd      databasee password
     * @param _db       database
     *                  <p>
     *                  Pass in the corresponding parameters and call the check() method
     *                  to enable service connection monitoring
     */
    public static void _start_(String file_path, String _host, int _port,
                               String _user, String _pwd, String _db) {

        _init_(file_path, _host, _port, _user, _pwd, _db);

        if (!new File(file_path).exists()) {
            System.err.println(df.format(new Date())+"[Failed to start service monitoring] '"
                    +file_path + "' is not exists");
            return;
        }

        System.err.println("Load connection listening information...");

        check();
    }

    /**
     *
     * @param file_path Server survival flag file
     * @param _host     Host number of the server
     * @param _port     database used port
     * @param _user     database user
     * @param _pwd      database password
     * @param _db       database name
     *
     *                  Initialize server address and service connection information
     */
    private static void _init_(String file_path, String _host, int _port,
                               String _user, String _pwd, String _db) {
        fp = file_path;
        host = _host;
        port = _port;
        user = _user;
        pwd = _pwd;
        db = _db;
    }

    /**
     * New threads listen for server connection status
     */
    private static synchronized void check() {
        final Properties info = new Properties();
        info.setProperty("user", user);
        info.setProperty("password", pwd);
        final String url = "jdbc:mysql://" + host + ":" + port + "/" + db;
        Thread thread = new Thread() {
            public void run() {
                Driver driver = null;
                PreparedStatement ps = null;
                Connection conn = null;
                try {
                    driver = new com.mysql.jdbc.Driver();
                } catch (SQLException ignored) {
                }
                System.err.println(df.format(new Date())+" Connection monitoring started successfully\n");
                while (true) {
                    boolean LIVE = false;
                    try {
                        assert driver != null;
                        conn = driver.connect(url, info);
                        if (conn != null) {
                            LIVE = true;
                        }
                    } catch (SQLException e2) {

                        if (last_sta == 1) {
                            write_mode(fp, "local");
                            System.err.println(df.format(new Date())+
                                    "[Service connection interrupted]-Mode change to -[local]\n");

                        }
                        last_sta = -1;
                    }

                    while (LIVE) {
                        String sql = "select 1";
                        try {
                            ps = conn.prepareStatement(sql);
                            ps.execute();
                            if (last_sta == -1) {
                                write_mode(fp, "online");
                                System.err.println(df.format(new Date())
                                        +"[Successfully regained service connection]-Mode change to -[online]\n");
                            }
                            last_sta = 1;
                        } catch (SQLException e1) {
                            LIVE = false;
                        }
                        sleep1(1000);
                    }

                }

            }
        };
        thread.start();
    }

    /**
     * Set heartbeat check time
     */
    private static void sleep1(int time) {
        try {
            Thread.sleep(time);
        } catch (InterruptedException ignored) {

        }
    }

    /**
     *
     * @param path Server survival flag file
     * @param mode About to jump target status
     */
    private static void write_mode(String path, String mode) {
        try {
            FileWriter fileWriter = new FileWriter(new File(path));
            fileWriter.write(mode);
            fileWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


}
